meaning TODO
============
- how do machines understand meaning?
  - logic
  - numerical values?
    - word:id
    - word:string (string is actually some numerical value)  
  - order
    - learn grammar by learning the common order of lists of [word:id, ...]

- how to avoid hard-coding parse logic?
  - connect commands to abstract commands (=, ==)
  - connect commands to dynamic commands (new words, etc.)
  - var keywords = {
      "is":"=",   // but how would this know if this is a question?
    }

- complex meanings (combinations of previously-learned definitions) >and
  - iterate through meanings for query output
  - check if we know the meanings to all newly attached meanings 
- parse "what (something else here) is __?"
  - "roots" approach f-m-l (first-middle-last)
  - stack keeps track of f-m-l matches?
  - pattern = ["what", "is", "{1}", "?"];
- relative weights of importance of individual tokens
  - based on how many tokens are present in phrase
    - i.e. 3 words (all "important") ... 10 words (only some are "important")
  - based on how often certain words are used with program
    
- categorization of ideas/subjects

- take away hard codings of parsed tokens
- abstract out parse function

- add context to meaning
  - >when

- important words:
  is

- do you like ___?
  - metadata

- store how word was used originally?
  - save pattern surrounding word
  - do kids need to know parts of speech in order to know speech patterns?
  - how to know what words are the focus of the sentence?
    - how to show emphasis in text... with speech, emphasis is easier to convey
    - assign parts of speech _guesses_ to word?
      - if weight is high, word might be a conjunction word (CW)
        - or, word might be an important verb (V)
